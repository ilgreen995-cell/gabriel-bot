# -*- coding: utf-8 -*-
import os
import random
import google.generativeai as genai
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- –ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê ---
PROJECT_NAME = "--- –ö–æ–Ω—Ç–µ–Ω—Ç-–∑–∞–≤–æ–¥ ¬´–ì–∞–±—Ä–∏—ç–ª—å –≥–ª–∞–≥–æ–ª–∏—Ç –î–∞–ª—è¬ª (v3.0 –§–∏–Ω–∞–ª—å–Ω–∞—è) ---"

# --- –ë–ê–ó–ê –î–ê–ù–ù–´–• –°–õ–û–í ---
CATEGORIES = {
    "–ï–¥–∞": {
        "adjectives": ["–ö–∞—Ä–∞–º–µ–ª—å–Ω—ã–π", "–ü–æ–¥–≥–æ—Ä–µ–≤—à–∏–π", "–õ–µ–¥—è–Ω–æ–π", "–û—Å—Ç—Ä—ã–π", "–°–ª–∏–≤–æ—á–Ω—ã–π"],
        "nouns": ["–ø–æ–Ω—á–∏–∫", "–º–æ—Ä–æ–∂–µ–Ω–æ–µ", "–∞—Ä–±—É–∑", "–±—É—Ç–µ—Ä–±—Ä–æ–¥", "–∫—Ä—É–∞—Å—Å–∞–Ω"]
    },
    "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏": {
        "adjectives": ["–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π", "–¶–∏—Ñ—Ä–æ–≤–æ–π", "–õ–∞–∑–µ—Ä–Ω—ã–π", "–ù–µ–æ–Ω–æ–≤—ã–π", "–†–æ–±–æ—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π"],
        "nouns": ["–¥—Ä–æ–Ω", "–ø—Ä–æ–µ–∫—Ç–æ—Ä", "—Å–µ—Ä–≤–µ—Ä", "–Ω–µ–π—Ä–æ—Å–µ—Ç—å", "–º–∏–∫—Ä–æ—á–∏–ø"]
    },
    "–°–ø–æ—Ä—Ç": {
        "adjectives": ["–û–ª–∏–º–ø–∏–π—Å–∫–∏–π", "–†–µ–∫–æ—Ä–¥–Ω—ã–π", "–ê—Ç–ª–µ—Ç–∏—á–Ω—ã–π", "–ü—Ä—ã–≥—É—á–∏–π", "–ì–∏–±–∫–∏–π"],
        "nouns": ["–±–∞—Ç—É—Ç", "—Å–∫–∞–∫–∞–ª–∫–∞", "–≥–∞–Ω—Ç–µ–ª—è", "–±–æ–∫—Å–µ—Ä—Å–∫–∞—è –≥—Ä—É—à–∞", "—Å–∫–µ–π—Ç–±–æ—Ä–¥"]
    },
    "–ò—Å–∫—É—Å—Å—Ç–≤–æ": {
        "adjectives": ["–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π", "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "–ë—Ä–æ–Ω–∑–æ–≤—ã–π", "–ú—Ä–∞–º–æ—Ä–Ω—ã–π", "–ê–≤–∞–Ω–≥–∞—Ä–¥–Ω—ã–π"],
        "nouns": ["–º–æ–ª—å–±–µ—Ä—Ç", "–≥—Ä–∞—Ñ—Ñ–∏—Ç–∏", "—Å—Ç–∞—Ç—É—è", "–≥–æ–±–µ–ª–µ–Ω", "–ø–∞–ª–∏—Ç—Ä–∞"]
    },
    "–ú–µ–¥–∏—Ü–∏–Ω–∞": {
        "adjectives": ["–°—Ç–µ—Ä–∏–ª—å–Ω—ã–π", "–•–∏—Ä—É—Ä–≥–∏—á–µ—Å–∫–∏–π", "–ö–ª–∏–Ω–∏—á–µ—Å–∫–∏–π", "–ê–Ω–∞—Ç–æ–º–∏—á–µ—Å–∫–∏–π", "–ò–Ω—ä–µ–∫—Ü–∏–æ–Ω–Ω—ã–π"],
        "nouns": ["—à–ø—Ä–∏—Ü", "—Å—Ç–µ—Ç–æ—Å–∫–æ–ø", "—Å–∫–∞–ª—å–ø–µ–ª—å", "–º–∏–∫—Ä–æ—Å–∫–æ–ø", "—Ç–∞–±–ª–µ—Ç–∫–∞"]
    }
}

# --- –î–£–®–ê –ü–†–û–ï–ö–¢–ê: –ì–õ–ê–ì–û–õ–´ –î–ê–õ–Ø ---
DAHL_VERBS = ["—é–ª–∏—Ç", "—à–∞—Ä–∞—Ö–∞–µ—Ç", "–≥–æ–ª–¥–∏—Ç", "–µ—Ä—ãÃÅ–∑–≥–∞–µ—Ç", "–∫—É–º–µ–∫–∞–µ—Ç", "–µ—Ä–µ–ø–µ–Ω–∏—Ç—Å—è", "—Ñ–∏–≥–ª—è—Ä–Ω–∏—á–∞–µ—Ç", "—Å–∫–æ–º–æ—Ä–æ—à–Ω–∏—á–∞–µ—Ç", "–ª—É–∫–∞–≤—Å—Ç–≤—É–µ—Ç", "–ø–µ–Ω—è–µ—Ç"]

# --- –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GEMINI ---

async def modernize_with_gemini(prompts: list) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –≤ Gemini –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ–¥–∏–Ω –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π."""
    try:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ, –°–¢–ê–ë–ò–õ–¨–ù–£–Æ –ú–û–î–ï–õ–¨
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        
        meta_prompt = (
            "–¢—ã ‚Äî –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä –¥–ª—è –≤–∏—Ä—É—Å–Ω—ã—Ö –≤–∏–¥–µ–æ. "
            "–¢–µ–±–µ –¥–∞–Ω—ã 3 –∞–±—Å—É—Ä–¥–Ω—ã–µ –∏–¥–µ–∏. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –∏—Ö –≤ –æ–¥–∏–Ω –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –≤–∏–∑—É–∞–ª—å–Ω–æ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π –∏ –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≤–∏–¥–µ–æ-–Ω–µ–π—Ä–æ—Å–µ—Ç–∏. "
            "–û–ø–∏—à–∏ —Å—Ü–µ–Ω—É, –¥–µ–π—Å—Ç–≤–∏—è, —Å—Ç–∏–ª—å –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É. –°–¥–µ–ª–∞–π —ç—Ç–æ —Å—Ç—Ä–∞–Ω–Ω—ã–º, –Ω–æ –ø–æ–Ω—è—Ç–Ω—ã–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏.\n\n"
            "–ò–¥–µ–∏:\n"
            f"- {prompts[0]}\n"
            f"- {prompts[1]}\n"
            f"- {prompts[2]}\n\n"
            "–¢–≤–æ–π —Å—Ü–µ–Ω–∞—Ä–∏–π:"
        )
        
        response = await model.generate_content_async(meta_prompt)
        return response.text
    except Exception as e:
        print(f"!!! –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Gemini: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API-–∫–ª—é—á –∏ –ª–æ–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["–ì–∞–±—Ä–∏—ç–ª—å, –≥–ª–∞–≥–æ–ª—å!"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    await update.message.reply_text(
        "–ú—ã —Ä–æ–¥–∏–ª–∏—Å—å, —á—Ç–æ–± —Ä–∞–∑—É–º —Å–¥–µ–ª–∞—Ç—å –ø—ã–ª—å—é. (v3.0)\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.",
        reply_markup=reply_markup,
    )

async def generate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞–±—Å—É—Ä–¥, –æ—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–æ–≤–µ—Ç –∫ Gemini...")

    category_names = list(CATEGORIES.keys())
    selected_categories = random.sample(category_names, 3)
    adjective_pool = [adj for cat in selected_categories for adj in CATEGORIES[cat]["adjectives"]]
    noun_pool = [noun for cat in selected_categories for noun in CATEGORIES[cat]["nouns"]]
    
    base_prompts = []
    for _ in range(3):
        adj = random.choice(adjective_pool)
        noun = random.choice(noun_pool)
        verb = random.choice(DAHL_VERBS)
        base_prompts.append(f"{adj} {noun} {verb}")

    gemini_script = await modernize_with_gemini(base_prompts)

    theme_text = ", ".join(selected_categories)
    final_message = (
        f"üî• **–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å–æ–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
        f"–¢–µ–º—ã —ç—Ç–æ–≥–æ —á–∞—Å–∞: **{theme_text}**.\n\n"
        f"–ë–∞–∑–æ–≤—ã–µ –∏–¥–µ–∏:\n"
        f"‚ñ™Ô∏è {base_prompts[0]}\n"
        f"‚ñ™Ô∏è {base_prompts[1]}\n"
        f"‚ñ™Ô∏è {base_prompts[2]}\n\n"
        f"üé¨ **–°—Ü–µ–Ω–∞—Ä–∏–π –æ—Ç Gemini:**\n{gemini_script}"
    )
    await update.message.reply_text(final_message, parse_mode='Markdown')


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

def main() -> None:
    TOKEN = os.environ.get('TELEGRAM_TOKEN')
    GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

    if not TOKEN or not GEMINI_API_KEY:
        print("–û–®–ò–ë–ö–ê: –û–¥–∏–Ω –∏–∑ API-–∫–ª—é—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
        
    genai.configure(api_key=GEMINI_API_KEY)

    application = Application.builder().token(TOKEN).build()
    application.add_error_handler(error_handler)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.Regex("^–ì–∞–±—Ä–∏—ç–ª—å, –≥–ª–∞–≥–æ–ª—å!$"), generate))
    
    print(f"{PROJECT_NAME} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == "__main__":
    main()

