# -*- coding: utf-8 -*-
import os
import random
import asyncio
import requests # "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∞–Ω—Ç–µ–Ω–Ω–∞" –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

# --- –ù–ê–ó–í–ê–ù–ò–ï –ü–†–û–ï–ö–¢–ê ---
PROJECT_NAME = "--- AI-—Ä–µ–∂–∏—Å—Å–µ—Ä ¬´–ì–∞–±—Ä–∏—ç–ª—å –≥–ª–∞–≥–æ–ª–∏—Ç –î–∞–ª—è¬ª (v7.2 - –°—Ç–∞–±–∏–ª—å–Ω–∞—è) ---"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
TREND_INPUT = 0

# --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞—Ä–µ–π –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ ---
def download_dictionary(url, name):
    print(f"–ó–∞–≥—Ä—É–∂–∞—é —Å–ª–æ–≤–∞—Ä—å '{name}' –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞...")
    try:
        response = requests.get(url)
        response.raise_for_status()
        words = response.content.decode('utf-8').splitlines()
        print(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤.")
        return [word.strip() for word in words if word.strip()]
    except requests.exceptions.RequestException as e:
        print(f"–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä—å '{name}': {e}")
        return []

# --- –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –°–°–´–õ–ö–ò –ù–ê –ë–û–õ–¨–®–ò–ï –ò–ù–¢–ï–†–ù–ï–¢-–°–õ–û–í–ê–†–ò ---
URL_SUBJECTS = "https://raw.githubusercontent.com/danakt/russian-words/master/nouns.txt"
URL_ACTIONS = "https://raw.githubusercontent.com/danakt/russian-words/master/verbs.txt" # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –¥–µ–π—Å—Ç–≤–∏—è
URL_SCENES = "https://raw.githubusercontent.com/danakt/russian-words/master/adjectives.txt" # –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ü–µ–Ω

# --- –ó–ê–ì–†–£–ñ–ê–ï–ú –°–õ–û–í–ê–†–ò –ü–†–ò –°–¢–ê–†–¢–ï –ë–û–¢–ê ---
SUBJECTS_RU = download_dictionary(URL_SUBJECTS, "–ì–µ—Ä–æ–∏ (—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ)")
ACTIONS_RU = download_dictionary(URL_ACTIONS, "–î–µ–π—Å—Ç–≤–∏—è (–≥–ª–∞–≥–æ–ª—ã)")
SCENES_RU_ADJECTIVES = download_dictionary(URL_SCENES, "–°—Ü–µ–Ω—ã (–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω—ã–µ)")

# –î–æ–±–∞–≤–∏–º –Ω–µ–º–Ω–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Å—Ç –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
SCENES_RU_NOUNS = ["–≤ –ø—É—Å—Ç–æ–π –≥–∞–ª–µ—Ä–µ–µ", "–Ω–∞ —Ç–∏—Ö–æ–º –æ–∑–µ—Ä–µ", "–Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –ú–∞—Ä—Å–∞", "–≤ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π –±—É–¥—É—â–µ–≥–æ", "–Ω–∞ –∫—É—Ö–Ω–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞", "–≤ –Ω–æ—á–Ω–æ–º –¢–æ–∫–∏–æ", "–≤ –ø–µ–Ω—Ç—Ö–∞—É—Å–µ —Å –≤–∏–¥–æ–º –Ω–∞ –≥–æ—Ä–æ–¥", "–Ω–∞ –ø–∏—Ä–∞—Ç—Å–∫–æ–º –∫–æ—Ä–∞–±–ª–µ", "–≤ –∫–æ–Ω—Ü–µ—Ä—Ç–Ω–æ–º –∑–∞–ª–µ", "–≤ –∑–∞–±—Ä–æ—à–µ–Ω–Ω–æ–º —Ö—Ä–∞–º–µ", "–Ω–∞ –≥–æ–Ω–æ—á–Ω–æ–π —Ç—Ä–∞—Å—Å–µ"]

# --- –î–£–®–ê –ü–†–û–ï–ö–¢–ê: –ì–õ–ê–ì–û–õ–´ –î–ê–õ–Ø ---
GLAGOLY_DALYA_RU = ["–≤—Å—Ç–æ–ø–æ—Ä—â–∏—Ç—å—Å—è", "–µ—Ä–Ω–∏—á–∞—Ç—å", "–æ–∫–æ–ª–ø–∞—á–∏—Ç—å", "–ª—É–∫–∞–≤—Å—Ç–≤–æ–≤–∞—Ç—å", "–Ω–µ–≥–æ–¥–æ–≤–∞—Ç—å", "–±—Ä–µ–∑–∂–∏—Ç—å", "–∫—É–º–µ–∫–∞—Ç—å", "—É—á–∏–Ω–∏—Ç—å", "–Ω–∞—Å—É–ø–∏—Ç—å—Å—è", "–≤–æ—Ä–æ–∂–∏—Ç—å", "—Å–∫–æ–º–æ—Ä–æ—à–Ω–∏—á–∞—Ç—å", "–ø–µ–Ω—è—Ç—å", "–ª–µ–±–µ–∑–∏—Ç—å", "—Å—É–¥–∞—á–∏—Ç—å", "—é—Ä–æ–¥—Å—Ç–≤–æ–≤–∞—Ç—å", "–∫–æ—â—É–Ω—Å—Ç–≤–æ–≤–∞—Ç—å", "–µ—Ä–µ–ø–µ–Ω–∏—Ç—å—Å—è", "–±–ª–∞–≥–æ–ª–µ–ø—Å—Ç–≤–æ–≤–∞—Ç—å", "—Ñ–∏–≥–ª—è—Ä–Ω–∏—á–∞—Ç—å", "—Ç—É–Ω–µ—è–¥—Å—Ç–≤–æ–≤–∞—Ç—å", "—É—Å–µ—Ä–¥—Å—Ç–≤–æ–≤–∞—Ç—å", "–ª–∏—Ö–æ–∏–º—Å—Ç–≤–æ–≤–∞—Ç—å"]

# --- –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ü–ê–†–ê–ú–ï–¢–†–´ –°–™–ï–ú–ö–ò (–æ—Å—Ç–∞—é—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º–∏) ---
CAMERA_ANGLES_RU = ["–ö—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω", "–°–≤–µ—Ä—Ö—à–∏—Ä–æ–∫–∏–π –æ–±—â–∏–π –ø–ª–∞–Ω", "–°—ä–µ–º–∫–∞ —Å –Ω–∏–∂–Ω–µ–≥–æ —Ä–∞–∫—É—Ä—Å–∞", "–í–∏–¥ —Å–≤–µ—Ä—Ö—É (–ø—Ç–∏—á–∏–π –ø–æ–ª–µ—Ç)", "–ì–æ–ª–ª–∞–Ω–¥—Å–∫–∏–π —É–≥–æ–ª", "–°—ä–µ–º–∫–∞ –∏–∑-–∑–∞ –ø–ª–µ—á–∞"]
CAMERA_MOVEMENTS_RU = ["–ü–ª–∞–≤–Ω—ã–π –Ω–∞–µ–∑–¥ (dolly in)", "–ë—ã—Å—Ç—Ä—ã–π, —Ä–µ–∑–∫–∏–π –º–æ–Ω—Ç–∞–∂", "–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–∞–Ω–æ—Ä–∞–º–∏—Ä–æ–≤–∞–Ω–∏–µ", "–°—ä–µ–º–∫–∞ —Å–æ —Å—Ç–µ–¥–∏–∫–∞–º–∞", "–í—Ä–∞—â–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã", "–≠—Ñ—Ñ–µ–∫—Ç '–≤–µ—Ä—Ç–∏–≥–æ'"]
LENS_EFFECTS_RU = ["–≠—Ñ—Ñ–µ–∫—Ç '—Ä—ã–±–∏–π –≥–ª–∞–∑'", "–ú—è–≥–∫–∏–π —Ñ–æ–∫—É—Å —Å –±–æ–∫–µ", "–ê–Ω–∞–º–æ—Ä—Ñ–æ—Ç–Ω—ã–µ –±–ª–∏–∫–∏", "–≠—Ñ—Ñ–µ–∫—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—ã '—Ç–∏–ª—å—Ç-—à–∏—Ñ—Ç'", "–ì–ª—É–±–æ–∫–∞—è —Ä–µ–∑–∫–æ—Å—Ç—å", "–ó–∞—Å–≤–µ—Ç–∫–∞ –ø–ª–µ–Ω–∫–∏"]
STYLES_RU = ["–≤ —Å—Ç–∏–ª–µ –£—ç—Å–∞ –ê–Ω–¥–µ—Ä—Å–æ–Ω–∞", "–≥–∏–ø–µ—Ä—Ä–µ–∞–ª–∏–∑–º", "–∫–∞–∫ –∑–∞–ø–∏—Å—å –Ω–∞ VHS –∫–∞—Å—Å–µ—Ç—É 80-—Ö", "–∫—É–∫–æ–ª—å–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è", "–≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ —Å—Ç—É–¥–∏–∏ Ghibli", "–∫–∏–±–µ—Ä–ø–∞–Ω–∫", "—Å—Ç–∏–º–ø–∞–Ω–∫", "—Å—ä–µ–º–∫–∞ –Ω–∞ IMAX –∫–∞–º–µ—Ä—É", "–≤ —Å—Ç–∏–ª–µ –∫–∞—Ä—Ç–∏–Ω—ã –±–∞—Ä–æ–∫–∫–æ"]
TEMPORAL_ELEMENTS_RU = ["–ó–∞–º–µ–¥–ª–µ–Ω–Ω–∞—è —Å—ä–µ–º–∫–∞ (slow motion)", "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Å—ä–µ–º–∫–∞ (timelapse)", "–†–µ–∑–∫–∏–π —Å—Ç–æ–ø-–∫–∞–¥—Ä", "–û–±—Ä–∞—Ç–Ω–∞—è –ø–µ—Ä–µ–º–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è", "–≠—Ñ—Ñ–µ–∫—Ç 'bullet time'"]

# --- –ê–ù–ì–õ–ò–ô–°–ö–ò–ï –í–ï–†–°–ò–ò –î–õ–Ø –ü–†–û–ú–ü–¢–ê (–æ—Å—Ç–∞—é—Ç—Å—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã) ---
SUBJECTS_EN = ["a living statue", "a talking fish", "a lonely astronaut"]
ACTIONS_EN = ["writing a self-portrait", "smoking a cigar", "playing golf on the Moon"]
SCENES_EN = ["in an empty art gallery", "on a quiet lake", "on the surface of Mars"]
CAMERA_ANGLES_EN = ["close-up shot", "extreme wide shot", "low-angle shot"]
CAMERA_MOVEMENTS_EN = ["dolly in", "fast cut editing", "slow panning"]
LENS_EFFECTS_EN = ["fisheye lens", "soft focus with bokeh", "anamorphic lens flare"]
STYLES_EN = ["in the style of Wes Anderson", "hyperrealistic", "80s VHS recording"]
TEMPORAL_ELEMENTS_EN = ["slow motion", "timelapse", "freeze frame"]


# --- –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –ë–û–¢–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [["–°–æ–∑–¥–∞—Ç—å –°—Ü–µ–Ω–∞—Ä–∏–π üé¨"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø ‚Äî AI-—Ä–µ–∂–∏—Å—Å–µ—Ä –ì–∞–±—Ä–∏—ç–ª—å.\n\n"
        "–Ø —Å–æ–∑–¥–∞—é –≤–∏—Ä—É—Å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–∏—Ö —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –±–µ–∑–≥—Ä–∞–Ω–∏—á–Ω—ã—Ö –±–∞–∑ —Å–ª–æ–≤.\n\n"
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
        reply_markup=reply_markup,
    )
    return ConversationHandler.END

async def request_trends(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–æ 3-—Ö –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤, –∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.\n\n"
        "–Ø –≤—ã–±–µ—Ä—É –æ–¥–∏–Ω —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –∏ –ø–æ—Å—Ç—Ä–æ—é –≤–æ–∫—Ä—É–≥ –Ω–µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏–π."
    )
    return TREND_INPUT

async def generate_script_from_trends(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü—Ä–∏–Ω—è—Ç–æ! –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–±–∞–∑–∞–º, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ —Ç—Ä–µ–Ω–¥—ã, –ø–∏—à—É —Å—Ü–µ–Ω–∞—Ä–∏–π...")
    
    user_trends = [trend.strip() for trend in update.message.text.splitlines() if trend.strip()]
    
    if not user_trends:
        await update.message.reply_text("–í—ã –Ω–µ –≤–≤–µ–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.")
        return ConversationHandler.END

    if not all([SUBJECTS_RU, ACTIONS_RU, SCENES_RU_ADJECTIVES]):
         await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
         return ConversationHandler.END

    trend_ru = random.choice(user_trends)
    trend_en = "something trending now"

    subject_ru = random.choice(SUBJECTS_RU)
    action_ru = random.choice(ACTIONS_RU)
    scene_ru = f"{random.choice(SCENES_RU_ADJECTIVES)} {random.choice(SCENES_RU_NOUNS)}"
    angle_ru = random.choice(CAMERA_ANGLES_RU)
    movement_ru = random.choice(CAMERA_MOVEMENTS_RU)
    lens_ru = random.choice(LENS_EFFECTS_RU)
    style_ru = random.choice(STYLES_RU)
    temporal_ru = random.choice(TEMPORAL_ELEMENTS_RU)
    dahl_verb_ru = random.choice(GLAGOLY_DALYA_RU)
    
    script_ru = (
        f"üé¨ **–†–µ–∂–∏—Å—Å–µ—Ä—Å–∫–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π**\n\n"
        f"‚ñ™Ô∏è **üî• –í–∞—à –¢—Ä–µ–Ω–¥:** {trend_ru.capitalize()}\n\n"
        f"‚ñ™Ô∏è **Subject:** {subject_ru.capitalize()}\n"
        f"‚ñ™Ô∏è **Action:** {action_ru}\n"
        f"‚ñ™Ô∏è **Scene:** {scene_ru}\n"
        f"‚ñ™Ô∏è **Camera Angle:** {angle_ru}\n"
        f"‚ñ™Ô∏è **Camera Movement:** {movement_ru}\n"
        f"‚ñ™Ô∏è **Lens Effect:** {lens_ru}\n"
        f"‚ñ™Ô∏è **Style:** {style_ru}\n"
        f"‚ñ™Ô∏è **Temporal:** {temporal_ru}\n\n"
        f"üé§ **–ì–æ–ª–æ—Å –ì–∞–±—Ä–∏—ç–ª—è:** *–ò –Ω–∞ —Ñ–æ–Ω–µ –≤—Å–µ–≥–æ —ç—Ç–æ–≥–æ –æ–Ω —É–º—É–¥—Ä–∏–ª—Å—è **{dahl_verb_ru}**.*"
    )
    
    prompt_en = (
        f"Trending now: {trend_en}. "
        f"{random.choice(SUBJECTS_EN)}, {random.choice(ACTIONS_EN)}, {random.choice(SCENES_EN)}, "
        f"{random.choice(CAMERA_ANGLES_EN)}, {random.choice(CAMERA_MOVEMENTS_EN)}, {random.choice(LENS_EFFECTS_EN)}, "
        f"{random.choice(STYLES_EN)}, {random.choice(TEMPORAL_ELEMENTS_EN)}, "
        f"cinematic, masterpiece, high detail"
    )

    await update.message.reply_text(script_ru, parse_mode='Markdown')
    await update.message.reply_text(f"ü§ñ **–ü—Ä–æ–º–ø—Ç –¥–ª—è AI-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞:**\n\n`{prompt_en}`", parse_mode='Markdown')
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.')
    return ConversationHandler.END

# –ù–û–í–´–ô –ë–õ–û–ö: "–ü–æ–º–æ—â–Ω–∏–∫ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞" –¥–ª—è –æ—Ç–ª–æ–≤–∞ –æ—à–∏–±–æ–∫
async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø–∞–¥–∞–ª."""
    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {context.error}")

def main() -> None:
    TOKEN = os.environ.get('TELEGRAM_TOKEN')
    if not TOKEN:
        print("–û–®–ò–ë–ö–ê: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    application = Application.builder().token(TOKEN).build()
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º "–ø–æ–º–æ—â–Ω–∏–∫–∞ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞"
    application.add_error_handler(error_handler)
    
    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^–°–æ–∑–¥–∞—Ç—å –°—Ü–µ–Ω–∞—Ä–∏–π üé¨$"), request_trends)],
        states={
            TREND_INPUT: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_script_from_trends)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(conv_handler)
    
    print(f"{PROJECT_NAME} –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == "__main__":
    main()

